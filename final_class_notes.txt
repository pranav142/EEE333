Whats on the Final
1. ALU
2. Finite State Machine
3. Pulse Width Modulation !
4. Shift Refisters !
5. Counters !
6. Verilog vs. System Verilog !!
7. unique case/priority case statement !!


Example Code: 

counters - count clock edges

pwm

x is a pulse of length that is same length as x is number of positive clock edges

procedural
module pwm(input clk, reset, input [3:0] x, output logic [3:0] count, output logic pw);

always_ff @ (posedge clk or posedge reset) begin
	if (reset)
		count <= 4'd0;
	else 
		count <= count + 4'd1;
end
assign pw = (count < x);

endmodule

register
module pwm2(input clk, reset, input [3:0] x, output logic [3:0] count, output logic pwm);

DReg #(4) D1 (clk, reset, count + 4'd1, count);
assign pw = (count < x);

endmodule


Shift Registers -> [ 1| 2| 3| 4| 5]

module shiftreg(input clk, reset, x, output logic y); 

logic [4:0] Buff;

awlays_ff @ (posedge clk or posedge reset) begin
	if (reset) 
		Buff <= 5'd0;
	else begin
		Buff <= {Buff[3:0], x};
		y <= Buff[i]; // this value is set to the value before the shift; this is set at the same time that buff is set 
	end
end

endmodule 


module shiftreg(input clk, reset, x, output logic Y);
logic [4:0] Buff;
DReg #(5) D1 (clk, reset, {Buff[3:0], x}, Buff);
assign Y = Buff[i];
endmodule

// shift to the left is multiply by 2 shift to the right is divide by 2

Verilog vs System Verilog

commbinatorial, initialize
Synchronous, reset
